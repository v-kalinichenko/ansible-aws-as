---
# roles/auto-scaling/tasks/main.yml

- name: Retrieve current Auto Scaling Group properties
  command: "aws --region {{ region }} autoscaling describe-auto-scaling-groups --auto-scaling-group-names {{ asg_name }}"
  register: asg_properties_result

- name: Set asg_properties variable from JSON output if the Auto Scaling Group already exists
  set_fact:
    asg_properties: "{{ (asg_properties_result.stdout | from_json).AutoScalingGroups[0] }}"
  when: (asg_properties_result.stdout | from_json).AutoScalingGroups | count

- name: Configure Auto Scaling Group and perform rolling deploy
  ec2_asg:
    aws_access_key: '{{ ami_access }}'
    aws_secret_key: '{{ ami_secret }}'
    region: "{{ region }}"
    name: "{{ asg_name }}"
    launch_config_name: "{{ lc_result.name }}"
    availability_zones: "{{ zone }}"
    health_check_type: EC2
    health_check_period: 60
    desired_capacity: 2
#    desired_capacity: "{{ asg_properties.DesiredCapacity | default(2) }}"
    replace_all_instances: yes
    replace_batch_size: 1
#    replace_batch_size: "{{ (asg_properties.DesiredCapacity | default(2) / 4) | round(0, 'ceil') | int }}"
    min_size: 2
    max_size: 3
    tags:
     - name: "{{ asg_name }}"
    wait_for_instances: no
#    wait_timeout: 600
#    wait_timeout: 1200
#    load_balancers: "{{ asg_name }}-lb"
    vpc_zone_identifier: '{{ subnetID }}'
    state: present
  register: asg_result

- debug: var=asg_result

- name: Configure Scaling Policies
  ec2_scaling_policy:
    aws_access_key: '{{ ami_access }}'
    aws_secret_key: '{{ ami_secret }}'
    region: "{{ region }}"
    name: "{{ item.name }}"
    asg_name: "{{ asg_name }}"
    state: present
    adjustment_type: "{{ item.adjustment_type }}"
    min_adjustment_step: "{{ item.min_adjustment_step }}"
    scaling_adjustment: "{{ item.scaling_adjustment }}"
    cooldown: "{{ item.cooldown }}"
  with_items:
    - name: "Increase Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: +1
      min_adjustment_step: 1
      cooldown: 180
    - name: "Decrease Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: -1
      min_adjustment_step: 1
      cooldown: 300
  register: sp_result

- name: Determine Metric Alarm configuration
  set_fact:
    metric_alarms:
      - name: "{{ asg_name }}-cpuUp"
        comparison: ">="
        threshold: 50.0
#        desc: "This will alarm when the average cpu usage of the ASG is greater than 50% for 1 minute" 
        alarm_actions:
          - "{{ sp_result.results[0].arn }}"
      - name: "{{ asg_name }}-cpuDown"
        comparison: "<="
        threshold: 20.0
#        desc: "This will alarm when the average cpu usage of the ASG is less than 20% for 1 minute"
        alarm_actions:
          - "{{ sp_result.results[1].arn }}"

- name: Configure Metric Alarms and link to Scaling Policies
  ec2_metric_alarm:
    aws_access_key: '{{ ami_access }}'
    aws_secret_key: '{{ ami_secret }}'
    region: "{{ region }}"
    name: "{{ item.name }}"
    state: present
    metric: "CPUUtilization"
    namespace: "AWS/EC2"
    statistic: "Average"
    comparison: "{{ item.comparison }}"
    threshold: "{{ item.threshold }}"
    period: 60
    evaluation_periods: 1
    unit: "Percent"
    dimensions:
      AutoScalingGroupName: "{{ asg_name }}"
    alarm_actions: "{{ item.alarm_actions }}"
  with_items: "{{metric_alarms}}"
  when: asg_result.max_size > 1
  register: ma_result
